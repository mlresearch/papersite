@InProceedings{wingate11a,
  title = {Lightweight Implementations of Probabilistic Programming Languages Via Transformational Compilation},
  author = {David Wingate and Andreas Stuhlmueller and Noah Goodman},
  pages = {770--778},
  abstract = {We describe a general method of transforming arbitrary programming languages into probabilistic programming languages with straightforward MCMC inference engines.  Random choices in the program are ``"named"'' with information about their position in an execution trace; these names are used in conjunction with a database of randomness to implement MCMC inference in the space of execution traces.  We encode naming information using lightweight source-to-source compilers.  Our method enables us to reuse existing infrastructure (compilers, interpreters, etc.) with minimal additional code, implying fast models with low development overhead.  We illustrate the technique on two languages, one functional and one imperative: Bher, a compiled version of the Church language which eliminates interpretive overhead of the original MIT-Church implementation, and Stochastic Matlab, a new open-source language.

[pdf]},
  pdf = {http://jmlr.org/proceedings/papers/v15/wingate11a/wingate11a.pdf},
}
